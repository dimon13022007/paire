from getpass import getuser
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sql_db_tg import Register, Events, User, EditState, Picture, Pictures, WaitOffer, Item, Games, Economy, ItemState, \
    app, db
from datetime import datetime, timedelta
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters.state import StateFilter
from sqlalchemy.exc import SQLAlchemyError
from flask import current_app, session, Response
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import F
from sqlalchemy.orm import sessionmaker
from admin_py import (admin_only)
import io
from aiogram.types import ContentType
from aiogram.types import InputFile
from io import BytesIO
import random
import logging
from contextlib import suppress
from aiogram.exceptions import TelegramBadRequest
import tracemalloc
import os
from PIL import Image
import io
from aiogram.types import FSInputFile
import os

import pytz

from sqlalchemy import func

tracemalloc.start()

TOKEN = "7047369595:AAHvR_z5p9bxbOXR7yqxIW7uPpOnv26-jB4"
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

group_message_count = {}


def get_session():
    with app.app_context():
        Session = sessionmaker(bind=db.engine)
        return Session()


@dp.message(Command("start"))
async def start_handler(message: types.Message):
    commands_list = (
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/about - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ HardCore Affiliate Club\n"
        "/add_event - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ\n"
        "/events - –°–ø–∏—Å–æ–∫ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ–±—ã—Ç–∏–π\n"
        "/edit_event - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ\n"
        "/delete_event - –£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ\n"
        "/coins - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç\n"
        "/daily - –ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É\n"
        "/richest - –¢–æ–ø-10 —Å–∞–º—ã—Ö –±–æ–≥–∞—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "/coins_give - –ü–µ—Ä–µ–¥–∞—Ç—å –º–æ–Ω–µ—Ç—ã –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
        "/economy - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —ç–∫–æ–Ω–æ–º–∏–∫–∏\n"
        "/economy_edit - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —ç–∫–æ–Ω–æ–º–∏–∫–∏\n"
        "/games - –ò–≥—Ä—ã —Å –±–æ—Ç–æ–º (–∫—É–±–∏–∫–∏, –∫–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞, —Ä—É–ª–µ—Ç–∫–∞, –∫–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã)\n"
        "/games-edit - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä\n"
        "/add_item - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä –≤ –º–∞–≥–∞–∑–∏–Ω\n"
        "/edit_item - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä\n"
        "/shop - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ\n"
        "/remove_item - –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞\n"
        "/rps - –ò–≥—Ä–∞ –∫–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞\n"
        "/dice - –ò–≥—Ä–∞ –≤ –∫–æ—Å—Ç–∏\n"
        "/wheel - –ö–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã\n"
        "/buy_item - –ö—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –º–∞–≥–∞–∑–∏–Ω–µ\n"
        "/add_meme - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –º–µ–º\n"
        "/offer_meme - –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –º–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É\n"
        "/delete_meme - –£–¥–∞–ª–∏—Ç—å –º–µ–º –ø–æ ID"
    )
    await message.answer(commands_list)



@dp.message(Command("about"))
async def about_command(message: types.Message):
    await message.answer(
        text="üòç HardCore Affiliate Club (https://hardcoreclub.online/affiliateclub) ‚Äî —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å—Ñ–µ—Ä—ã affiliate –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞. –ù–µ —Ç–æ–ª—å–∫–æ –≤–µ–±–æ–≤, –ü–ü-—à–µ–∫ –∏ —Ä–µ–∫–ª–æ–≤, –Ω–æ –∏ –¥—Ä—É–≥–∏—Ö, –±–æ–ª–µ–µ \"—Ç–µ–Ω–µ–≤—ã—Ö\" —Ä–æ–ª–µ–π. –°—é–¥–∞ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –≤—Å–µ, –∫—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ PR, HR, –¥–∏–∑–∞–π–Ω–µ, –∫–æ–Ω—Ç–µ–Ω—Ç–µ. –ë–∞–π–µ—Ä—ã, –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ —Ç–µ—Ö–Ω–∞—Ä–∏. –ü—Ä–æ–¥–∞–∫—Ç—ã, –ø—Ä–æ–¥–∂–µ–∫—Ç—ã –∏ –¥–∞–∂–µ –æ–≤–Ω–µ—Ä—ã.\n\n"
             "–†—ã–Ω–æ–∫ —Å–µ–π—á–∞—Å —Ç–∞–∫–æ–π, —á—Ç–æ –æ–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫ —á–∞—Å—Ç–æ –±–µ—Ä–µ—Ç –Ω–∞ —Å–µ–±—è —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏–π. –õ—å—é—â–∏–π –∞—Ñ—Ñ –º–µ–Ω–µ–¥–∂–µ—Ä ‚Äî —ç—Ç–æ –Ω–æ—Ä–º–∞. –ö–æ–ø–∏—Ä–∞–π—Ç–µ—Ä —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è PR-–¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–º –≤ –ü–ü, –∞ –≤–µ–±—ã –ø–∏–ª—è—Ç –æ—Ñ—Ñ–ª–∞–π–Ω-–∫–æ–Ω—Ñ—ã –Ω–µ —Ö—É–∂–µ –æ–ø—ã—Ç–Ω—ã—Ö –∏–≤–µ–Ω—Ç—â–∏–∫–æ–≤. –¢–∞–∫–∏—Ö –ª—é–¥–µ–π –º–Ω–æ–≥–æ, –∏ –≤—Å–µ–º –∏–º –Ω—É–∂–Ω–æ –º–µ—Å—Ç–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥–∞.\n\n"
             "–¢–∞–∫–æ–µ –º–µ—Å—Ç–æ, –≥–¥–µ –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –∑–∞–∫–∏–Ω—É—Ç—å –∏–¥–µ—é ‚Äî –∏ —Ç–µ–±–µ –æ—Ç–≤–µ—Ç—è—Ç, –ø–æ–º–æ–≥—É—Ç, –ø–æ–¥—Å–∫–∞–∂—É—Ç. –°–æ–±–µ—Ä—É—Ç –≤–æ–π—Å –¥–ª—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—è. –ê –µ—â–µ –ø–æ–±–æ–ª—Ç–∞—é—Ç –Ω–∞ –æ—Ç–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Ç–µ–º—ã —Ç–∏–ø–∞ –∫–æ—Ç–∏–∫–æ–≤ –∏–ª–∏ –ø–∏–≤–∞. –ù–æ –≤—Å–µ —ç—Ç–æ ‚Äî —Å –ª—é–¥—å–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞ –≤—Å–µ —Å—Ç–æ —Ç–µ–±—è –ø–æ–Ω–∏–º–∞—é—Ç, –ø–æ—Ç–æ–º—É —á—Ç–æ –≤—ã –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –≤ –æ–¥–Ω–æ–π —Å—Ñ–µ—Ä–µ, –∏ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—Ñ–∏—Ç–Ω—ã–π —Ä–∞–±–æ—á–∏–π –∫–æ–Ω—Ç–∞–∫—Ç –∏ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ.\n\n"
             "–ù–∞—à —Å–ª–æ–≥–∞–Ω ‚Äî \"–Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥ –≤ —Ç–≤–æ–µ–º —Ä–∏—Ç–º–µ\". (https://hardcoreclub.online/affiliateclub) –ú—ã —Ä–µ–≥—É–ª—è—Ä–Ω–æ —Å–æ–±–∏—Ä–∞–µ–º—Å—è –≤ Discord, –≥–¥–µ –Ω–µ—Ç–≤–æ—Ä–∫–∞–µ–º, –æ–±—â–∞–µ–º—Å—è, –∏–≥—Ä–∞–µ–º –≤ –∏–≥—Ä—ã –∏ –ø—Ä–æ–≤–æ–¥–∏–º —Ä–∞–∑–Ω—ã–µ –∏–≤–µ–Ω—Ç—ã: –∫–∞–∫ –æ–±—É—á–∞—é—â–∏–µ, —Ç–∞–∫ –∏ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ. –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ü–µ–ª–∏ –∏ –≤–∏–¥–µ–Ω–∏–µ –ø–æ–º–æ–≥–∞—é—Ç HardCore –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–º –º–µ—Å—Ç–æ–º –¥–ª—è –≤—Å–µ—Ö. –ù–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ –Ω–∞—à–µ–º —Å–µ—Ä–≤–µ—Ä–µ —Ç—ã –Ω–µ –Ω–∞–π–¥–µ—à—å —Å–∫–∞–º–µ—Ä–æ–≤ –∏–ª–∏ —Ö–∞–Ω—Ç–µ—Ä–æ–≤ —É—Ä–æ–≤–Ω—è \"–ø—Ä–∏–≤–µ—Ç –±—Ä–æ –≤–∏–¥–µ–ª —Ç–µ–±—è –≤ —á–∞—Ç–µ –µ—Å—Ç—å —Å–æ—á–Ω—ã–π –æ—Ñ—Ñ–µ—Ä\"."
    )


@dp.message(Command("add_event"))
async def add_event_start(message: types.Message, state: FSMContext):
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
    await state.set_state(Register.waiting_for_name)


@dp.message(StateFilter(Register.waiting_for_name))
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ [YYYY-MM-DD HH:MM] –∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ GMT –≤ —Ñ–æ—Ä–º–∞—Ç–µ [-H –∏–ª–∏ +H]"
    )
    await state.set_state(Register.waiting_for_time_event)


@dp.message(StateFilter(Register.waiting_for_time_event))
async def process_time_event(message: types.Message, state: FSMContext):
    try:
        input_text = message.text.strip()
        date_time_str, timezone_str = input_text.rsplit(" ", 1)
        event_time = datetime.strptime(date_time_str, "%Y-%m-%d %H:%M")

        if timezone_str.startswith("+") or timezone_str.startswith("-"):
            timezone_offset = int(timezone_str)
            timezone = pytz.FixedOffset(timezone_offset * 60)
        else:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞")

        event_time = pytz.utc.localize(event_time).astimezone(timezone)

        await state.update_data(time_event=event_time, timezone_offset=timezone_offset)

        await message.answer("–î–æ–±–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç-–∞–Ω–æ–Ω—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
        await state.set_state(Register.waiting_for_post_announcement_link)
    except ValueError:
        await message.answer(
            "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ [YYYY-MM-DD HH:MM] –∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ GMT –≤ —Ñ–æ—Ä–º–∞—Ç–µ [-H –∏–ª–∏ +H]")
    except:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@dp.message(StateFilter(Register.waiting_for_post_announcement_link))
async def process_post_announcement_link(message: types.Message, state: FSMContext):
    await state.update_data(post_announcement_link=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Google Calendar:")
    await state.set_state(Register.waiting_for_google_calendar_link)


@dp.message(StateFilter(Register.waiting_for_google_calendar_link))
async def process_google_calendar_link(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    user_data["google_calendar_link"] = message.text

    new_event = Events(
        name=user_data["name"],
        time_event=user_data["time_event"],
        timezone_offset=user_data["timezone_offset"],
        post_announcement_link=user_data["post_announcement_link"],
        google_calendar_link=user_data["google_calendar_link"]
    )

    with app.app_context():
        try:
            db.session.add(new_event)
            db.session.commit()
            await message.answer(
                f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É!\n\n"
                f"ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {new_event.id}\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {new_event.name}\n"
                f"–í—Ä–µ–º—è: {new_event.time_event.strftime('%Y-%m-%d %H:%M')} UTC{new_event.timezone_offset:+03d}\n"
                f"–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç-–∞–Ω–æ–Ω—Å: {new_event.post_announcement_link}\n"
                f"–°—Å—ã–ª–∫–∞ –Ω–∞ Google Calendar: {new_event.google_calendar_link}"
            )

        except Exception as e:
            db.session.rollback()
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –±–∞–∑—É: {e}")

    await state.clear()


@dp.message(Command("events"))
async def add_event_start(message: types.Message, state: FSMContext):
    with app.app_context():
        try:
            current_time = datetime.now()

            nearest_event = Events.query.filter(Events.time_event > current_time) \
                .order_by(Events.time_event.asc()) \
                .limit(3).all()

            if nearest_event:
                await message.answer("–°–ø–∏—Å–æ–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ HardCore Affiliate")
                response = ""
                num = 0
                for event in nearest_event:
                    num += 1
                    response += (
                        f"{num}\n"
                        f"ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {event.id or '–ù–µ—Ç'}\n"
                        f"üìÖ –ù–∞–∑–≤–∞–Ω–∏–µ: {event.name}\n"
                        f"–í—Ä–µ–º—è {event.time_event.strftime('%Y-%m-%d %H:%M')} {event.time_event.strftime('%z')}\n"
                        f"üîó –ü–æ—Å—Ç-–∞–Ω–æ–Ω—Å: {event.post_announcement_link or '–ù–µ—Ç'}\n"
                        f"üìå Google Calendar: {event.google_calendar_link or '–ù–µ—Ç'}\n\n"

                    )
                await message.answer(response)
            else:
                await message.answer("–ë–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        except Exception as e:
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")


@dp.message(Command("edit_event"))
async def edit_event_start(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:")
    await state.set_state("waiting_for_event_id")


@dp.message(StateFilter("waiting_for_event_id"))
async def process_event_id(message: types.Message, state: FSMContext):
    try:
        event_id = int(message.text)

        with app.app_context():
            event = Events.query.filter_by(id=event_id).first()

        if event:
            await state.update_data(event_id=event_id)
            await send_event_info(event, message, state)
        else:
            await message.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            await state.finish()
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
        await state.finish()


def fetch_event(event_id, message, state):
    with current_app.app_context():
        event = Events.query.filter_by(id=event_id).first()

    if event:
        return send_event_info(event, message, state)
    else:
        return handle_event_not_found(message, state)


async def send_event_info(event, message, state):
    button = InlineKeyboardBuilder()
    button.button(text="Name", callback_data="Name")
    button.button(text="Date", callback_data="Date")
    button.button(text="Post-Anons", callback_data="Post-Anons")
    button.button(text="Google-Calendar", callback_data="Google-Calendar")
    button.adjust(1)

    await message.answer(f"–ù–∞–π–¥–µ–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {event.name}\n"
                         f"1. –ù–∞–∑–≤–∞–Ω–∏–µ: {event.name}\n"
                         f"2. –í—Ä–µ–º—è: {event.time_event} (–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {event.timezone_offset or '–ù–µ—Ç'})\n"
                         f"3. –ü–æ—Å—Ç-–∞–Ω–æ–Ω—Å: {event.post_announcement_link or '–ù–µ—Ç'}\n"
                         f"4. Google Calendar: {event.google_calendar_link or '–ù–µ—Ç'}\n"
                         "–ö–∞–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏?",
                         reply_markup=button.as_markup())


from datetime import datetime, timezone, timedelta




@dp.callback_query(F.data.in_({"Name", "Date", "Post-Anons", "Google-Calendar"}))
async def handle_field_edit(callback: types.CallbackQuery, state: FSMContext):
    field_mapping = {
        "Name": "name",
        "Date": "time_event",
        "Post-Anons": "post_announcement_link",
        "Google-Calendar": "google_calendar_link",
    }
    field = field_mapping.get(callback.data)

    if not field:
        await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.")
        await callback.answer()
        return

    data = await state.get_data()
    event_id = data.get("event_id")

    with get_session() as session:
        event = session.query(Events).filter_by(id=event_id).first()
        if event:
            if field == "time_event":
                current_time = event.time_event or "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
                current_timezone = event.timezone_offset or "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
                await state.update_data(field=field)
                await callback.message.answer(
                    "–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É, –≤—Ä–µ–º—è –∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å, –ø–æ–∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ."
                )
            else:
                current_value = getattr(event, field, "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ")
                await state.update_data(field=field)
                await callback.message.answer(
                    f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è {field}.\n"
                    f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_value}."
                )
            await state.set_state(EditState.waiting_for_new_value)
        else:
            await callback.message.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    await callback.answer()


@dp.message(StateFilter(EditState.waiting_for_new_value))
async def save_new_value(message: types.Message, state: FSMContext):
    data = await state.get_data()
    field = data.get("field")
    event_id = data.get("event_id")

    with get_session() as session:
        event = session.query(Events).filter_by(id=event_id).first()
        if not event:
            await message.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            await state.clear()
            return

        if field == "time_event":
            try:
                datetime_str, timezone_offset_str = map(str.strip, message.text.split(" +"))

                new_time_event = datetime.strptime(datetime_str, "%Y-%m-%d %H:%M")

                timezone_offset = int(timezone_offset_str)
                new_time_event = new_time_event.replace(tzinfo=timezone(timedelta(hours=timezone_offset)))

                event.time_event = new_time_event
                event.timezone_offset = f"+{timezone_offset_str}"
                session.commit()

                await message.answer(f"–ù–æ–≤–æ–µ –≤—Ä–µ–º—è: {new_time_event.strftime('%Y-%m-%d %H:%M %z')}\n"
                                     f"–ù–æ–≤—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: +{timezone_offset_str}")
            except ValueError:
                await message.answer(
                    "–û—à–∏–±–∫–∞: —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç '–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú +–ß–∞—Å–æ–≤–æ–π_–ø–æ—è—Å' (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2024-12-25 15:30 +2).")
        else:
            new_value = message.text.strip()
            setattr(event, field, new_value)
            session.commit()
            await message.answer(f"–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {field} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {new_value}")

    await state.clear()


@dp.message(Command("delete_event"))
async def delete_command(message: types.Message):
    try:

        if len(message.text.split()) < 2:
            await message.answer("–í—ã –Ω–µ –≤–≤–µ–ª–∏ id –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–∞–∫–æ–π /delete_event ID")
            return
        event_id = message.text.split()[1]

        if not event_id.isdigit():
            await message.answer("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return

        event_id = int(event_id)

        with get_session() as session:
            event = session.query(Events).filter(Events.id == event_id).first()

            if event:
                session.delete(event)
                session.commit()
                await message.answer(f"–ú–µ—Ä–æ–ø—Ä–µ—è—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ.")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


@dp.message(Command("coins"))
async def coins_count(message: types.Message):
    user_name = message.from_user.username

    if not user_name:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç username –≤ Telegram.")
        return

    with app.app_context():
        user = User.query.filter_by(name=user_name).first()
        if user:
            await message.answer(f"@{user.name} —É —Ç–µ–±—è –Ω–∞ —Å—á–µ—Ç—É {user.coins} HardCoins")
        else:
            await message.answer(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_name} —É —Ç–µ–±—è –Ω–∏—á–µ–≥–æ –Ω–µ—Ç! –í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /daily –∏ –ø–æ–ª—É—á–∏ –Ω–∞–≥—Ä–∞–¥—É!"
            )


base_reward = 100
serias = 2
bonus_coins = 777
max_serias = 10


def time_to_next_daily(last_daily_time):
    now = datetime.utcnow()
    next_daily_time = last_daily_time + timedelta(days=1)
    time_left = next_daily_time - datetime.utcnow()
    hours = time_left.seconds // 3600
    minutes = (time_left.seconds % 3600) // 60
    return f"{hours:02}:{minutes:02}"


@dp.message(Command("daily"))
async def daily(message: types.Message):
    session = get_session()
    user = session.query(User).filter_by(id=message.from_user.id, name=message.from_user.username).first()

    if not user:
        user = User(id=message.from_user.id, name=message.from_user.username)
        session.add(user)
        session.commit()

    now = datetime.utcnow()

    if user.last_daily:
        time_last_daily = now - user.last_daily
        if timedelta(hours=20) <= time_last_daily <= timedelta(hours=30):
            reward = base_reward * serias
            user.coins += reward
            user.serias_streak += 1

            if user.serias_streak >= max_serias:
                user.coins += bonus_coins
                await message.answer(
                    f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤–∞—à–∞ —Å–µ—Ä–∏—è –¥–æ—Å—Ç–∏–≥–ª–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã {max_serias}! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å {bonus_coins} HardCoins.")
                user.serias_streak = 0
            else:
                await message.answer(
                    f"{reward} –∑–∞–±–∏—Ä–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É –≤–º–µ—Å—Ç–µ —Å –±–æ–Ω—É—Å–æ–º –∑–∞ {user.serias_streak} {bonus_coins} HardCoins.")
        else:
            time_left = time_to_next_daily(user.last_daily)
            await message.answer(
                f"@{message.from_user.username}, —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏. –ü–æ—Ç–µ—Ä–ø–∏ –µ—â–µ {time_left}.")
    else:
        user.coins += base_reward
        user.serias_streak = 0
        await message.answer(f"{message.from_user.username} –∑–∞–±–∏—Ä–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É: {base_reward} HardCoins ")

    user.last_daily = now
    session.commit()


@dp.message(Command("richest"))
async def top_coins(message: types.Message):
    try:
        chat_name = message.chat.title if message.chat.title else message.chat.username
        with app.app_context():
            top_users = User.query.order_by(User.coins.desc()).limit(10).all()

        if top_users:
            top_message = f"–¢–æ–ø-10 —Å–∞–º—ã—Ö –±–æ–≥–∞—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π @{chat_name}:\n\n"
            for i, user in enumerate(top_users, 1):
                top_message += f"{i}. {user.name} - {user.coins} –º–æ–Ω–µ—Ç(—ã)\n"

            await message.answer(top_message)
        else:
            await message.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –º–æ–Ω–µ—Ç–∞–º–∏.")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")


@dp.message(Command("coins_give"))
async def give_coins(message: types.Message):
    command_parts = message.text.split()

    if len(command_parts) != 3:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. /coins_give @username [coins]")
        return

    username = command_parts[1].replace('@', '')
    coins_amount = command_parts[2]

    try:
        coins_amount = int(coins_amount)
    except ValueError:
        await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    session = get_session()
    user = session.query(User).filter_by(name=username).first()

    if user is None:
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å username @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    user.coins += coins_amount
    session.commit()

    await message.answer(
        f" @{message.from_user.username} –ø–µ—Ä–µ–≤–µ–ª {coins_amount} HardCoins –Ω–∞ —Å—á–µ—Ç @{username}.")


@dp.message(Command("economy"))
async def economy(message: types.Message):
    with app.app_context():
        economy_entry = db.session.query(Economy).first()

        if not economy_entry:
            new_entry = Economy(economy="Your economy text here")
            db.session.add(new_entry)
            db.session.commit()
            economy_entry = new_entry
            await message.answer("–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
        else:
            await message.answer(f"{economy_entry.economy}")


@dp.message(Command("economy_edit"))
async def economy_edit(message: types.Message):
    command_parts = message.text.split(maxsplit=1)

    if len(command_parts) != 2:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /economy_edit –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return

    new_description = command_parts[1]

    with app.app_context():
        economy_entry = db.session.query(Economy).first()

        if economy_entry:
            economy_entry.economy = new_description
            db.session.commit()
            await message.answer(f"–û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {economy_entry.economy}")
        else:
            new_entry = Economy(economy=new_description)
            db.session.add(new_entry)
            db.session.commit()
            await message.answer(f"–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {new_entry.economy}")


@dp.message(Command("games"))
async def games(message: types.Message):
    with app.app_context():
        games_entry = db.session.query(Games).first()

        if not games_entry:
            new_entry = Games(
                games=(
                    "/dice <—Å—Ç–∞–≤–∫–∞> –ë—Ä–æ—Å—å –¥–≤–∞ –∫—É–±–∏–∫–∞ —Ç–∞–∫, —á—Ç–æ–±—ã –Ω–∞–±—Ä–∞—Ç—å –±–æ–ª—å—à–µ –æ—á–∫–æ–≤, —á–µ–º –±–æ—Ç. "
                    "–í—ã–±—Ä–æ—Å–∏—à—å –¥–≤–µ —à–µ—Å—Ç–µ—Ä–∫–∏ - –ø–æ–ª—É—á–∏—à—å —Ö3 –æ—Ç —Å–≤–æ–µ–π —Å—Ç–∞–≤–∫–∏. "
                    "/rps <—Å—Ç–∞–≤–∫–∞> ¬´–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞¬ª –ø—Ä–æ—Ç–∏–≤ –±–æ—Ç–∞. "
                    "/roulette <—Å—Ç–∞–≤–∫–∞> –†—É–ª–µ—Ç–∫–∞ –∏–∑ —à–µ—Å—Ç–∏ —à–∞–≥–æ–≤ —Å –ø–æ–≤—ã—à–µ–Ω–∏–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ. "
                    "–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —à–∞–≥–∞ –º–æ–∂–µ—à—å –∑–∞–±—Ä–∞—Ç—å –ø—Ä–∏–∑ –∏–ª–∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –µ—â–µ —Ä–∞–∑. "
                    "–î–æ—à–µ–ª –¥–æ –∫–æ–Ω—Ü–∞ ‚Äì –∑–∞–±—Ä–∞–ª –¥–∂–µ–∫-–ø–æ—Ç. "
                    "/wheel <—Å—Ç–∞–≤–∫–∞> –ö–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã! –ú–æ–∂–µ—à—å –≤—ã–∏–≥—Ä–∞—Ç—å –¥–æ +500 HardCoins –∏–ª–∏ –ø–æ—Ç–µ—Ä—è—Ç—å —Å—Ç–æ–ª—å–∫–æ –∂–µ."
                )
            )
            db.session.add(new_entry)
            db.session.commit()
            games_entry = new_entry
            await message.answer("–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
        else:
            await message.answer(f"{games_entry.games}")


@dp.message(Command("games-edit"))
async def games_edit(message: types.Message):
    command_parts = message.text.split(maxsplit=1)

    if len(command_parts) != 2:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /games-edit –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return

    new_description = command_parts[1]

    with app.app_context():
        games_entry = db.session.query(Games).first()

        if games_entry:
            games_entry.games = new_description
            db.session.commit()
            await message.answer(f"–û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:\n\n {games_entry.games}")
        else:
            new_entry = Games(games=new_description)
            db.session.add(new_entry)
            db.session.commit()
            await message.answer(f"–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ:\n\n {new_entry.games}")


@dp.message(Command("add_item"))
async def add_item_start(message: types.Message, state: FSMContext):
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.")
    await state.set_state(ItemState.waiting_for_name_good)


@dp.message(StateFilter(ItemState.waiting_for_name_good))
async def process_name_good(message: types.Message, state: FSMContext):
    await state.update_data(name_good=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞.")
    await state.set_state(ItemState.waiting_for_price_good)


@dp.message(StateFilter(ItemState.waiting_for_price_good))
async def process_price(message: types.Message, state: FSMContext):
    await state.update_data(price_good=message.text)
    await message.answer("–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.")
    await state.set_state(ItemState.waiting_for_description_good)


@dp.message(StateFilter(ItemState.waiting_for_description_good))
async def process_desc(message: types.Message, state: FSMContext):
    await state.update_data(description_good=message.text)
    await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.")
    await state.set_state(ItemState.waiting_for_picture_good)


@dp.message(StateFilter(ItemState.waiting_for_picture_good), F.content_type == ContentType.PHOTO)
async def process_picture_db(message: types.Message, state: FSMContext):
    photo = message.photo[-1]
    file_id = photo.file_id
    file = await message.bot.get_file(file_id)
    photo_bytes = io.BytesIO()
    await message.bot.download_file(file.file_path, photo_bytes)
    photo_bytes.seek(0)

    await state.update_data(picture_good=photo_bytes.getvalue())
    user_data = await state.get_data()

    new_item = Item(
        name_good=user_data["name_good"],
        price_good=user_data["price_good"],
        description_good=user_data["description_good"],
        picture_good=user_data["picture_good"]
    )

    with app.app_context():
        try:
            db.session.add(new_item)
            db.session.commit()

            await message.answer(
                f"–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω\n\n"
                f"ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {new_item.id}\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {new_item.name_good}\n"
                f"–¶–µ–Ω–∞: {new_item.price_good}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {new_item.description_good}\n"
                f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:\n\n "
            )
        except Exception as e:
            await message.answer(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—É: {str(e)}")
    await state.clear()


@dp.message(Command("edit_item"))
async def start_edit_item(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:")
    await state.set_state("waiting_for_item_id")


@dp.message(StateFilter("waiting_for_item_id"))
async def process_item_id(message: types.Message, state: FSMContext):
    try:
        item_id = int(message.text)

        with app.app_context():
            item = Item.query.filter_by(id=item_id).first()

        if item:
            await state.update_data(item_id=item_id)
            await send_item_info(item, message, state)
        else:
            await message.answer("–¢–æ–≤–∞—Ä —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.finish()
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
        await state.finish()


def fetch_item(item_id, message, state):
    with current_app.app_context():
        item = Item.query.filter_by(id=item_id).first()

    if item:
        return send_item_info(item, message, state)
    else:
        return handle_item_not_found(message, state)


async def send_item_info(item, message, state):
    button = InlineKeyboardBuilder()
    button.button(text="–ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="Name_Good")
    button.button(text="–¶–µ–Ω–∞", callback_data="Price_Good")
    button.button(text="–û–ø–∏—Å–∞–Ω–∏–µ", callback_data="Description")
    button.button(text="–§–æ—Ç–æ", callback_data="Picture")
    button.adjust(1)

    await message.answer(
        f"–ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä: {item.name_good}\n"
        f"1. –ù–∞–∑–≤–∞–Ω–∏–µ: {item.name_good}\n"
        f"2. –¶–µ–Ω–∞: {item.price_good}\n"
        f"3. –û–ø–∏—Å–∞–Ω–∏–µ: {item.description_good or '–ù–µ—Ç'}\n"
        "–ö–∞–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏?",
        reply_markup=button.as_markup()
    )


@dp.callback_query(F.data.in_({"Name_Good", "Price_Good", "Description", "Picture"}))
async def name_callback(callback: types.CallbackQuery, state: FSMContext):
    field_mapping = {
        "Name_Good": "name_good",
        "Price_Good": "price_good",
        "Description": "description_good",
        "Picture": "picture_good",
    }

    field = field_mapping.get(callback.data)
    if not field:
        await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.")
        await callback.answer()
        return

    data = await state.get_data()
    item_id = data.get("item_id")

    print(f"ID —Ç–æ–≤–∞—Ä–∞: {item_id}, –ø–æ–ª–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è: {field}")

    with get_session() as session:
        item = session.query(Item).filter_by(id=item_id).first()
        if item:
            current_value = getattr(item, field, "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ")
            await state.update_data(field=field)
            await callback.message.answer(
                f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–µ: {current_value}"
            )
            await state.set_state(ItemState.waiting_for_new_value_good)
        else:
            await callback.message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await callback.answer()


@dp.message(ItemState.waiting_for_new_value_good)
async def update_item_field(message: types.Message, state: FSMContext):
    new_value = message.text
    data = await state.get_data()
    item_id = data.get("item_id")
    field = data.get("field")

    with get_session() as session:
        item = session.query(Item).filter_by(id=item_id).first()
        if item:
            setattr(item, field, new_value)
            session.commit()
            await message.answer(f"–ó–Ω–∞—á–µ–Ω–∏–µ '{field}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {new_value}")
        else:
            await message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await state.clear()


@dp.message(Command("shop"))
async def shop(message: types.Message):
    item_part = message.text.split()
    try:
        if len(item_part) < 2:
            try:
                with get_session() as session:
                    item = session.query(Item).all()

                    if not item:
                        await message.answer("–ú–∞–≥–∞–∑–∏–Ω –ø—É—Å—Ç.")
                        return
                    response = ""
                    for items in item:
                        response += (f"–ù–∞–∑–≤–∞–Ω–∏–µ: {items.name_good}\n"
                                     f"–¶–µ–Ω–∞: {items.price_good} HardCoins\n"
                                     f"ID –¢–æ–≤–∞—Ä–∞: {items.id}\n\n")

                    await message.answer(response)
            except Exception as e:
                await message.answer(f"–°–ª—É—á–∏–ª–∞—Å—å –æ—à–∏–±–∫–∞: {str(e)}")

            finally:
                session.close()
        else:
            item_id = item_part[1]

            try:
                item_id = int(item_id)
            except ValueError:
                await message.answer("ID –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
                return

            with get_session() as session:
                item = session.query(Item).filter_by(id=item_id).first()

                if not item:
                    await message.answer(f"–¢–æ–≤–∞—Ä —Å ID {item_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return

                response = (
                    f"HardCore Affiliate Club Shop\n\n"
                    f"–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞: {item.name_good}\n"
                    f"ID: {item.id}\n"
                    f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {item.price_good} HardCoins\n"
                    f"–û–ø–∏—Å–∞–Ω–∏–µ:\n{item.description_good}\n"
                )

                await message.answer(response)
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        import traceback
        await message.answer(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏:\n{traceback.format_exc()}")


@dp.message(Command("remove_item"))
async def delete_command(message: types.Message):
    try:

        if len(message.text.split()) < 2:
            await message.answer("–í—ã –Ω–µ –≤–≤–µ–ª–∏ id –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–∞–∫–æ–π /remove_item ID")
            return
        item_id = message.text.split()[1]

        if not item_id.isdigit():
            await message.answer("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return

        item_id = int(item_id)

        with get_session() as session:
            item = session.query(Item).filter(Item.id == item_id).first()

            if item:
                session.delete(item)
                session.commit()
                await message.answer(f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å ID {item_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


@dp.message(Command("levels"))
async def top_level(message: types.Message):
    try:
        chat_name = message.chat.title if message.chat.title else message.chat.username
        chat_id = message.chat.id

        if chat_id not in group_message_count:
            await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞.")
            return

        chat_users = group_message_count[chat_id]
        sorted_users = sorted(chat_users.items(), key=lambda x: x[1]['count'], reverse=True)

        top_message = f"HardCore Affiliate Club Leaderboard @{chat_name}:\n\n"

        with get_session() as session:
            for i, (user_id, data) in enumerate(sorted_users, 1):
                user = session.query(User).filter_by(id=user_id).first()
                if user:
                    level = get_level(user.experience)  # Calculate level for each user
                    top_message += f"{i}. {data['name']} - {data['count']} —Å–æ–æ–±—â–µ–Ω–∏–π, —É—Ä–æ–≤–µ–Ω—å {level}\n"

        await message.answer(top_message)
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")


word = ["–ö–∞–º–µ–Ω—å", "–ù–æ–∂–Ω–∏—Ü—ã", "–ë—É–º–∞–≥–∞"]

def create_rps_buttons():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="ü™® –ö–∞–º–µ–Ω—å", callback_data="rock"),
                InlineKeyboardButton(text="‚úÇÔ∏è –ù–æ–∂–Ω–∏—Ü—ã", callback_data="scissors"),
                InlineKeyboardButton(text="üìÑ –ë—É–º–∞–≥–∞", callback_data="paper")
            ]
        ]
    )




@dp.message(Command("rps"))
async def start_rps(message: types.Message):
    with get_session() as session:
        user_id = message.from_user.id
        global bet
        print("–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–æ–∫...gdfghdfhdfhd")

        try:
            bet = int(message.text.split()[1])
        except (IndexError, ValueError):
            await message.answer("–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ –æ—Ç 1 –¥–æ 300 HardCoins. –ü—Ä–∏–º–µ—Ä: /rps 150")
            return

        user = session.query(User).get(user_id)
        print("–û—Ç–ø—Ä")

        if user is None:
            await message.answer("–£ —Ç–µ–±—è –Ω–∏—á–µ–≥–æ –Ω–µ—Ç—É, –ø–µ—Ä–µ–π–¥–∏ –≤ –∫–æ–º–∞–Ω–¥—É /daily")
            return

        last_used = user.last_rps_use

        if last_used and datetime.now() - last_used < timedelta(days=1):
            await message.answer("–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!")
            return
        print("–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–æ–∫")

        if bet < 1 or bet > 300:
            await message.answer("–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 300 HardCoins!")
            return
        print("–û—Ç–ø—Ä–∞–≤–∫–∞.")

        if user.coins < bet:
            await message.answer(
                f"{user.name}, —É —Ç–µ–±—è –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–∏–Ω–æ–≤")
            return

        print("–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–æ–∫...")
        await message.answer(f"–°—Ç–∞–≤–∫–∞ {bet} HardCoins –ø—Ä–∏–Ω—è—Ç–∞! –¢–µ–ø–µ—Ä—å –≤—ã–±–∏—Ä–∞–π—Ç–µ: –∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã –∏–ª–∏ –±—É–º–∞–≥–∞.",
                             reply_markup=create_rps_buttons())

        user.last_rps_use = datetime.now()
        session.commit()


@dp.callback_query(F.data == "rock")
async def rock(call: types.CallbackQuery):
    with get_session() as session:

        user = session.query(User).filter_by(id=call.from_user.id).first()

        bot_bit = random.choice(word)
        print(bot_bit)
        if "–ö–∞–º–µ–Ω—å" in bot_bit:
            await call.message.answer(
                f"@{call.message.from_user.username} –≤—ã–±–µ—Ä–∞–µ—Ç –∫–∞–º–µ–Ω—å, —è –≤—ã–±–∏—Ä–∞—é –∫–∞–º–µ–Ω—å, —ç—Ç–æ –Ω–∏—á—å—è, —Ç—ã –∑–∞–±–∏—Ä–µ—à—å —Å–≤–æ—é —Å—Ç–∞–≤–∫—É {bet}")

        elif "–ù–æ–∂–Ω–∏—Ü—ã" in bot_bit:
            user_bet = bet * 2
            user.coins += user_bet
            session.commit()
            await call.message.answer(f"–ö–∞–º–µ–Ω—å –ø–æ–±–µ–∂–¥–∞–µ—Ç –Ω–æ–∂–Ω–∏—Ü—ã —Ç—ã –≤—ã–≥—Ä–∞–ª {user_bet}")

        elif "–ë—É–º–∞–≥–∞" in bot_bit:
            user.coins -= bet
            session.commit()
            await call.message.answer(f"–ë—É–º–∞–≥–∞ –ø–æ–±–µ–∂–¥–∞–µ—Ç –∫–∞–º–µ–Ω—å, —Ç—ã –ø—Ä–æ–∏–≥—Ä–∞–ª {bet}")


@dp.callback_query(F.data == "scissors")
async def rock(call: types.CallbackQuery):
    with get_session() as session:

        user = session.query(User).filter_by(id=call.from_user.id).first()

        bot_bit = random.choice(word)
        print(bot_bit)
        if "–ö–∞–º–µ–Ω—å" in bot_bit:
            user.coins -= bet
            session.commit()
            await call.message.answer(f"–ö–∞–º–µ–Ω—å –ø–æ–±–µ–∂–¥–∞–µ—Ç –Ω–æ–∂–Ω–∏—Ü—ã, —Ç—ã –ø—Ä–æ–∏–≥—Ä–∞–ª {bet}")

        elif "–ù–æ–∂–Ω–∏—Ü—ã" in bot_bit:
            await call.message.answer(
                f"@{call.message.from_user.username} –≤—ã–±–µ—Ä–∞–µ—Ç –Ω–æ–∂–Ω–∏—Ü—ã, —è –≤—ã–±–∏—Ä–∞—é –Ω–æ–∂–Ω–∏—Ü—ã, —ç—Ç–æ –Ω–∏—á—å—è, —Ç—ã –∑–∞–±–∏—Ä–µ—à—å —Å–≤–æ—é —Å—Ç–∞–≤–∫—É {bet}")

        elif "–ë—É–º–∞–≥–∞" in bot_bit:
            user_bet = bet * 2
            user.coins += user_bet
            session.commit()
            await call.message.answer(f"–ù–æ–∂–Ω–∏—Ü—ã –ø–æ–±–µ–∂–¥–∞—é—Ç –±—É–º–∞–≥—É, —Ç—ã –≤—ã–≥—Ä–∞–ª {user_bet}")


@dp.callback_query(F.data == "paper")
async def rock(call: types.CallbackQuery):
    with get_session() as session:

        user = session.query(User).filter_by(id=call.from_user.id).first()

        bot_bit = random.choice(word)
        print(bot_bit)

        if "–ö–∞–º–µ–Ω—å" in bot_bit:
            user_bet = bet * 2
            user.coins += user_bet
            session.commit()
            await call.message.answer(f"–ë—É–º–∞–≥–∞ –ø–æ–±–µ–∂–¥–∞–µ—Ç –∫–∞–º–µ–Ω—å —Ç—ã –≤—ã–≥—Ä–∞–ª {user_bet}")

        elif "–ù–æ–∂–Ω–∏—Ü—ã" in bot_bit:
            user.coins -= bet
            session.commit()
            await call.message.answer(f"–ë—É–º–∞–≥–∞ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç –Ω–æ–∂–Ω–∏—Ü–∞–º, —Ç—ã –ø—Ä–æ–∏–≥—Ä–∞–ª {bet}")

        elif "–ë—É–º–∞–≥–∞" in bot_bit:
            await call.message.answer(
                f"@{call.message.from_user.username} –≤—ã–±–µ—Ä–∞–µ—Ç –±—É–º–∞–≥—É, —è –≤—ã–±–∏—Ä–∞—é –±—É–º–∞–≥—É, —ç—Ç–æ –Ω–∏—á—å—è, —Ç—ã –∑–∞–±–∏—Ä–µ—à—å —Å–≤–æ—é —Å—Ç–∞–≤–∫—É {bet}")


chanell_id = -1002322279461


async def send_message(channel_id: int, text: str):
    await bot.send_message(channel_id, text)


@dp.message(Command("dice"))
async def start_dice(message: types.Message):
    with get_session() as session:
        user_id = message.from_user.id
        global bet1
        try:
            bet1 = int(message.text.split()[1])
        except (IndexError, ValueError):
            await message.answer("–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ –æ—Ç 1 –¥–æ 300 HardCoins. –ü—Ä–∏–º–µ—Ä: /dice 150")
            return

        user = session.query(User).get(user_id)

        if user is None:
            await message.answer("–£ —Ç–µ–±—è –Ω–∏—á–µ–≥–æ –Ω–µ—Ç—É, –ø–µ—Ä–µ–π–¥–∏ —Å—é–¥–∞ /daily")
            return

        if user.last_dice_use and (datetime.now() - user.last_dice_use) < timedelta(days=1):
            await message.answer("–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!")
            return

        if bet1 < 1 or bet1 > 300:
            await message.answer("–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 300 HardCoins!")
            return

        if user.coins < bet1:
            await message.answer(
                f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è —Å—Ç–∞–≤–∫–∏ {bet1} HardCoins! –£ –≤–∞—Å –≤—Å–µ–≥–æ {user.coins} –º–æ–Ω–µ—Ç.")
            return

        dice_bot1 = random.randint(1, 6)
        dice_bot2 = random.randint(1, 6)

        dice_player1 = random.randint(1, 6)
        dice_player2 = random.randint(1, 6)

        total_bot = dice_bot1 + dice_bot2
        total_player = dice_player1 + dice_player2

        if total_bot > total_player:
            user.coins -= bet1
            result = f"@{message.from_user.username}, —Ç—ã –≤—ã–±—Ä–æ—Å–∏–ª {dice_player1} –∏ {dice_player2}, –∞ —è {dice_bot1} –∏ {dice_bot2}. –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª."
        elif total_player > total_bot:
            betx2 = bet1 * 2
            user.coins += betx2
            result = f"@{message.from_user.username}, —Ç—ã –≤—ã–±—Ä–æ—Å–∏–ª {dice_player1} –∏ {dice_player2}, –∞ —è {dice_bot1} –∏ {dice_bot2}. –¢—ã –≤—ã–∏–≥—Ä–∞–ª, –∑–∞–±–∏—Ä–∞–π {betx2} HardCoins."
        else:
            result = f"@{message.from_user.username}, —Ç—ã –≤—ã–±—Ä–æ—Å–∏–ª {dice_player1} –∏ {dice_player2}, –∏ —è –≤—ã–±—Ä–æ—Å–∏–ª {dice_bot1} –∏ {dice_bot2}, —ç—Ç–æ –Ω–∏—á—å—è, —Ç—ã –∑–∞–±–∏—Ä–∞–µ—à—å —Å–≤–æ—é —Å—Ç–∞–≤–∫—É {bet1} HardCoins."

        user.last_dice_use = datetime.now()
        session.commit()

        await message.answer(result)

def get_current_season():
    month = datetime.utcnow().month
    if month in [12, 1, 2]:
        return "Winter"
    elif month in [3, 4, 5]:
        return "Spring"
    elif month in [6, 7, 8]:
        return "Summer"
    else:
        return "Fall"


from datetime import datetime


def get_current_season():
    month = datetime.utcnow().month
    if month in [12, 1, 2]:
        return "Winter"
    elif month in [3, 4, 5]:
        return "Spring"
    elif month in [6, 7, 8]:
        return "Summer"
    else:
        return "Fall"


@dp.message(Command("buy"))
async def buy_item(message: types.Message):
    try:
        item_id = int(message.text.split()[1])
        user_id = message.from_user.id
        current_season = get_current_season()

        if len(message.text.split()) < 2:
            await message.answer("–í—ã –Ω–µ –≤–≤–µ–ª–∏ id –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–∞–∫–æ–π /buy_item ID")
            return

        with get_session() as session:
            user = session.query(User).filter_by(id=user_id).first()
            if not user:
                await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            item = session.query(Item).filter_by(id=item_id).first()
            if not item:
                await message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            if user.coins < item.price_good:
                await message.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.")
                return

            if user.season == current_season and user.item_id == item_id:
                await message.answer("–í—ã —É–∂–µ –ø–æ–∫—É–ø–∞–ª–∏ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä –≤ —ç—Ç–æ–º —Å–µ–∑–æ–Ω–µ.")
                return
            level = get_level(user.experience)
            if level < 10:
                await message.answer("–£ –≤–∞—Å –µ—â–µ –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—Ä–æ–≤–Ω–µ–π –¥–ª—è –¥–∞–Ω–Ω–æ–π –ø–æ–∫—É–ø–∫–∏")
            else:
                user.coins -= item.price_good
                user.season = current_season
                user.item_id = item_id
                user.timestamp = datetime.utcnow()
                session.delete(item)
                session.commit()

                await message.answer(
                    f"–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ {item.name_good} –∑–∞ {item.price_good} –º–æ–Ω–µ—Ç!"
                )
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


class RouletteGame(StatesGroup):
    in_game = State()


COEFFICIENTS = [1.1, 1.18, 1.38, 1.39, 1.6]
chanse = [0, 1]


@dp.message(Command("roulette"))
async def start_game(message: types.Message, state: FSMContext):
    try:
        with app.app_context():
            _, bet = message.text.split()
            bet = int(bet)

            user = User.query.filter_by(id=message.from_user.id).first()
            if not user:
                await message.answer("–£ —Ç–µ–±—è –Ω–∏—á–µ–≥–æ –Ω–µ—Ç. –í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /daily.")
                return

            if user.coins < bet:
                await message.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è —Å—Ç–∞–≤–∫–∏.")
                return

            if user.last_played and (datetime.now() - user.last_played) < timedelta(days=1):
                await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∑–∞–≤—Ç—Ä–∞.")
                return

            await state.update_data(bet=bet, round=0, current_win=bet, user_id=user.id)
            user.coins -= bet
            user.last_played = datetime.now()
            db.session.commit()

            await message.answer(
                f"@{message.from_user.username} —Å—Ç–∞–≤–∏—Ç {bet} HardCoins –∏ –∂–º—ë—Ç –Ω–∞ —Å–ø—É—Å–∫. –ù–∞—á–∏–Ω–∞–µ–º!",
                reply_markup=await generate_game_buttons()
            )

            await state.set_state(RouletteGame.in_game)
    except (ValueError, IndexError):
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /roulette <—Å—Ç–∞–≤–∫–∞>")


async def generate_game_buttons():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–ó–∞–±—Ä–∞—Ç—å", callback_data="take"),
                InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue"),
            ]
        ]
    )


async def send_message_user(channel_id: int, text: str):
    await bot.send_message(channel_id, text)


async def send_message_user_markup(channel_id: int, text: str, markup):
    await bot.send_message(channel_id, text, reply_markup=markup)


@dp.callback_query(StateFilter(RouletteGame.in_game))
async def game_logic(callback_query: types.CallbackQuery, state: FSMContext):
    with app.app_context():
        user_data = await state.get_data()
        user = User.query.get(user_data["user_id"])

        if not user:
            await send_message_user(callback_query.message.chat.id, "–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.finish()
            return

        bet = user_data['bet']
        round_number = user_data['round']
        current_win = user_data['current_win']

        await callback_query.message.edit_reply_markup()

        if callback_query.data == "take":
            user.coins += current_win
            db.session.commit()

            await send_message_user(
                callback_query.message.chat.id,
                f"@{callback_query.from_user.username} –∑–∞–±–∏—Ä–∞–µ—Ç —Å—Ç–∞–≤–∫—É {current_win} HardCoins. –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
            )
            await state.finish()
            return

        result = random.randint(0, 1)

        if result == 0:
            await send_message_user(
                callback_query.message.chat.id,
                f"@{callback_query.from_user.username} –ø—Ä–æ–∏–≥—Ä–∞–ª. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∑–∞–≤—Ç—Ä–∞."
            )
            await state.finish()
        else:
            round_number += 1
            if round_number > len(COEFFICIENTS):
                user.coins += current_win
                db.session.commit()

                await send_message_user(
                    callback_query.message.chat.id,
                    f"@{callback_query.from_user.username} –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç –∏ –∑–∞–±–∏—Ä–∞–µ—Ç –¥–∂–µ–∫-–ø–æ—Ç {current_win} HardCoins!"
                )
                await state.finish()
                return

            current_win = int(current_win * COEFFICIENTS[round_number - 1])
            coefficient = COEFFICIENTS[round_number - 1]
            await state.update_data(round=round_number, current_win=current_win)

            await send_message_user_markup(
                callback_query.message.chat.id,
                f"–¢—ã –≤—ã–∏–≥—Ä–∞–ª {current_win} HardCoins! –£–≤–µ–ª–∏—á–∏–≤–∞–µ—à—å —Å—Ç–∞–≤–∫—É, —á—Ç–æ–±—ã –≤—ã–∏–≥—Ä–∞—Ç—å –µ—â—ë –±–æ–ª—å—à–µ (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: x{coefficient})?",
                await generate_game_buttons()
            )


@dp.message(Command("wheel"))
async def fortune_wheel(message: types.Message):
    user_id = message.from_user.id
    cost = 150

    with get_session() as session:
        user = session.query(User).get(user_id)

        if user is None:
            await message.answer("–£ —Ç–µ–±—è –Ω–∏—á–µ–≥–æ –Ω–µ—Ç—É, –ø–µ—Ä–µ–π–¥–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /daily")
            return

        if user.coins < cost:
            await message.answer(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –∫—Ä—É—Ç–∫–∏! –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–π –∫—Ä—É—Ç–∫–∏: {cost} HardCoins.")
            return

        last_used = user.last_wheel_use

        if last_used and datetime.now() - last_used < timedelta(days=1):
            await message.answer("–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É –∫–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!")
            return

        user.coins -= cost
        user.last_wheel_use = datetime.now()
        session.commit()

    msg = await message.answer(f"@{message.from_user.username} —Ä–∞—Å–∫—Ä—É—á–∏–≤–∞–µ—Ç –∫–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã!")

    await asyncio.sleep(random.randint(3, 5))
    res = [0,-1,-10,-100,-250,-500,1,10,100,250,500]

    result = random.choice(res)

    if result < 0:
        result_text = f"@{message.from_user.username} {result}. –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–≤–µ–∑–µ—Ç!"
    else:
        result_text = f"@{message.from_user.username} {result}. –°–µ–≥–æ–¥–Ω—è —É–¥–∞—á–∞ –Ω–∞ —Ç–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ, –º–æ–∂–µ—Ç –∏ —Å –∞–ø–ø—Ä—É–≤–æ–º –ø–æ–≤–µ–∑–µ—Ç."

    await msg.edit_text(result_text)


@dp.message(Command("add_meme"))
async def add_item_start(message: types.Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—Ç–µ –º–µ–º –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å.")
    await state.set_state(Pictures.waiting_for_pict)


@dp.message(StateFilter(Pictures.waiting_for_pict), F.content_type == ContentType.PHOTO)
async def process_picture_db(message: types.Message, state: FSMContext):
    photo = message.photo[-1]
    file_id = photo.file_id
    file = await message.bot.get_file(file_id)
    photo_bytes = io.BytesIO()
    await message.bot.download_file(file.file_path, photo_bytes)
    photo_bytes.seek(0)

    await state.update_data(picture=photo_bytes.getvalue())
    user_data = await state.get_data()

    new_item = Picture(
        picture=user_data["picture"]
    )

    with app.app_context():
        try:
            db.session.add(new_item)
            db.session.commit()

            await message.answer(
                f"ID {new_item.id}\n"
                f"–ú–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω: "
            )
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
    await state.clear()

@dp.message(Command("offer_meme"))
async def offer(message: types.Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ")
    await state.set_state(WaitOffer.waiting_for_offer)


async def send_admin(chat_ids, photo, caption=None):
    for chat_id in chat_ids:
        await bot.send_photo(chat_id, photo=photo, caption=caption)


@dp.message(StateFilter(WaitOffer.waiting_for_offer), F.content_type == ContentType.PHOTO)
async def meme_offer(message: types.Message, state: FSMContext):
    photo = message.photo[-1].file_id
    admin = [998279547,5148825065,7009934641]

    await send_admin(admin, photo, caption="–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –º–µ–º–∞!")
    await message.answer("–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    await state.clear()


@dp.message(Command("delete_meme"))
async def delete_command(message: types.Message):
    try:

        if len(message.text.split()) < 2:
            await message.answer("–í—ã –Ω–µ –≤–≤–µ–ª–∏ id –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–∞–∫–æ–π /delete_meme meme_ID")
            return
        meme_id = message.text.split()[1]

        if not meme_id.isdigit():
            await message.answer("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return

        meme_id = int(meme_id)

        with get_session() as session:
            meme = session.query(Picture).filter(Picture.id == meme_id).first()

            if meme:
                session.delete(meme)
                session.commit()
                await message.answer(f"–ú–µ–º —Å ID {meme_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


IMAGE_FOLDER = 'static/images'
if not os.path.exists(IMAGE_FOLDER):
    os.makedirs(IMAGE_FOLDER)

IMGUR_CLIENT_ID = '6f2534e59278fc1'


async def upload_image_to_imgur(image_data):
    url = "https://api.imgur.com/3/upload"
    headers = {
        "Authorization": f"Client-ID {IMGUR_CLIENT_ID}"
    }
    files = {
        'image': image_data
    }
    response = requests.post(url, headers=headers, files=files)
    if response.status_code == 200:
        data = response.json()
        return data['data']['link']
    else:
        return None


async def send_random_picture(message: types.Message):
    try:
        with app.app_context():
            random_picture = Picture.query.order_by(func.random()).first()
            if random_picture:
                temp_file_path = os.path.join(IMAGE_FOLDER, f"{random_picture.id}.jpg")
                with open(temp_file_path, 'wb') as temp_file:
                    temp_file.write(random_picture.picture)

                photo = FSInputFile(temp_file_path)
                await message.answer_photo(photo, caption=f"–ú–µ–º –¥–Ω—è –¥–ª—è {message.from_user.username}")
            else:
                await message.answer("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–µ–º–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
        
@dp.message(Command("meme"))
async def meme_command(message: types.Message):
    await send_random_picture(message)


def get_level(experience):
    level_thresholds = [
        (100, 1),
        (250, 2),
        (500, 3),
        (750, 4),
        (1000, 5),
        (1500, 6),
        (2250, 7),
        (3250, 8),
        (4500, 9),
        (6000, 10),
        (7750, 11),
        (9750, 12),
        (12000, 13),
        (14600, 14),
        (17550, 15),
        (20850, 16),
        (24500, 17),
        (28500, 18),
        (32850, 19),
        (37550, 20)
    ]
    for threshold, level in level_thresholds:
        if experience < threshold:
            return level - 1
    return 20


@dp.message()
async def count_messages(message: Message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    user_name = message.from_user.username

    if chat_id not in group_message_count:
        group_message_count[chat_id] = {}

    if user_id in group_message_count[chat_id]:
        group_message_count[chat_id][user_id]['count'] += 1
    else:
        group_message_count[chat_id][user_id] = {
            'count': 1,
            'name': user_name
        }

    with get_session() as session:
        user = session.query(User).filter_by(id=user_id).first()

        if not user:
            user = User(
                id=user_id,
                name=message.from_user.username,
                coins=0,
                experience=0,
                last_message_time=None,
                message_count=0
            )
            session.add(user)
            session.commit()

        if user.last_message_time and (datetime.utcnow() - user.last_message_time) < timedelta(minutes=1):
            return

        experience_gained = random.randint(15, 25)
        user.experience += experience_gained
        user.last_message_time = datetime.utcnow()  # Update last message time
        session.commit()


async def handle_event_not_found(message, state):
    await message.answer("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    await state.finish()


async def handle_item_not_found(message, state):
    await message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    await state.finish()


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    import asyncio

    asyncio.run(main())
