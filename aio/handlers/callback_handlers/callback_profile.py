from aiogram import Router
from aio.func.func_profile import profile
from aio.bot_token import bot
from aio.keyboards.keyboard_for_restart_register import ChangeRegister
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram import F
from database.metod_for_database import MetodSQL
from text_translete.translate import get_translator
import gettext
from aio.keyboards.keyboard_ref import RefCode
from aio.keyboards.keyboard_for_start import MetodKeyboardInline


router = Router()


@router.callback_query(F.data == "my_prof")
async def profile_handler(callback: CallbackQuery):
    await callback.answer("")

    user_id = callback.from_user.id

    lang_param = await MetodSQL.get_language(user_id)
    translator = await get_translator(lang_param)
    _ = translator.gettext

    try:
        prof = profile(bot, user_id, callback.message.chat.id, reply_mark=await ChangeRegister.changed_register(callback.from_user.id))
        if not prof:
            text = _("–£ –≤–∞—Å –ø–æ–∫–∞—á—Ç–æ –Ω–µ—Ç—É –∞–Ω–∫–µ—Ç—ã")
            await callback.message.edit_text(text)
        else:
            await prof
    except Exception:
        text = _("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")
        await callback.message.answer(text)


@router.callback_query(F.data == "filter")
async def filter_callback(callback: CallbackQuery):
    await callback.answer("")

    lang_param = await MetodSQL.get_language(callback.from_user.id)
    print(lang_param)

    translator = await get_translator(lang_param)
    _ = translator.gettext
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="Backend", callback_data="set_filter_Backend")],
        [InlineKeyboardButton(text="Front-end", callback_data="set_filter_Frontend")],
        [InlineKeyboardButton(text="Full Stack", callback_data="set_filter_FullStack")],
        [InlineKeyboardButton(text="Game Dev", callback_data="set_filter_GameDev")],
        [InlineKeyboardButton(text="Mobile Dev", callback_data="set_filter_MobileDev")],
        [InlineKeyboardButton(text=_("–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä"), callback_data="reset_filter")],
        [InlineKeyboardButton(text=_("–ù–∞–∑–∞–¥ üîô"), callback_data="back_setting_menu")]

    ])
    text = _("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–¥—É—Å—Ç—Ä–∏—é –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∞–Ω–∫–µ—Ç:")
    await callback.message.edit_text(text, reply_markup=markup)


@router.callback_query(F.data.startswith("set_filter_"))
async def set_filter_callback(callback: CallbackQuery, state: FSMContext):
    await callback.answer("")

    lang_param = await MetodSQL.get_language(callback.from_user.id)
    print(lang_param)

    translator = await get_translator(lang_param)
    _ = translator.gettext
    industry = callback.data.split("_")[2]
    await state.update_data(industry_filter=industry)
    text = _("–§–∏–ª—å—Ç—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {industry}.\n–ù–∞–∂–º–∏—Ç–µ /show –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–Ω–∫–µ—Ç.").format(industry=industry)
    await callback.message.edit_text(text)
    await callback.answer()


@router.callback_query(F.data == "reset_filter")
async def reset_filter_callback(callback: CallbackQuery, state: FSMContext):
    lang_param = await MetodSQL.get_language(callback.from_user.id)
    await callback.answer("")

    print(lang_param)

    translator = await get_translator(lang_param)
    _ = translator.gettext
    await state.update_data(industry_filter=None)
    text = _("–§–∏–ª—å—Ç—Ä —Å–±—Ä–æ—à–µ–Ω. –¢–µ–ø–µ—Ä—å –∏—â–µ–º –≤—Å–µ –∞–Ω–∫–µ—Ç—ã  \n/show")
    await callback.message.answer(text)
    await callback.answer()


@router.callback_query(F.data == "deactivate_anketa")
async def deactivate_callback(callback:CallbackQuery):
    await callback.answer("")

    lang_param = await MetodSQL.get_language(callback.from_user.id)
    print(lang_param)

    translator = await get_translator(lang_param)
    _ = translator.gettext

    user_id = callback.from_user.id

    try:
        await MetodSQL.set_profile_active(user_id, False)
        text = _("üö´ –ê–Ω–∫–µ—Ç–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.\n"
            "–ñ–µ–ª–∞–µ–º –≤–∞–º —É–¥–∞—á–∏ –≤ —Å—Ç–∞—Ä—Ç–∞–ø–µ! üí°\n\n"
            "–ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –≤–∫–ª—é—á–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∏ –∏—Å–∫–∞—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ ‚Äî –≤–≤–µ–¥–∏—Ç–µ /activate")
        await callback.message.edit_text(
            text
        )
    except Exception:
        text = _("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await callback.message.answer(text)

    try:
        prof = profile(bot, user_id, callback.message.chat.id,
                       reply_mark=await ChangeRegister.changed_register(callback.from_user.id))
        if not prof:
            text = _("–£ –≤–∞—Å –ø–æ–∫–∞—á—Ç–æ –Ω–µ—Ç—É –∞–Ω–∫–µ—Ç—ã")
            await callback.message.answer(text)
        else:
            await prof
    except Exception:
        text = _("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")
        await callback.message.answer(text)


@router.callback_query(F.data == "refcode")
async def refcode_handler(callback: CallbackQuery):
    await callback.answer("")

    lang_param = await MetodSQL.get_language(callback.from_user.id)
    print(lang_param)

    translator = await get_translator(lang_param)
    _ = translator.gettext
    text = _("üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥. "
        "–ü–µ—Ä–µ–¥–∞–π—Ç–µ –µ–≥–æ –¥—Ä—É–≥—É, —á—Ç–æ–±—ã –æ–Ω —Å–º–æ–≥ —É–∫–∞–∑–∞—Ç—å –≤–∞—à –∫–æ–¥ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. "
        "–í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –±—É—Å—Ç –∞–Ω–∫–µ—Ç—ã! üöÄ")
    await callback.message.edit_text(
        text
    ,reply_markup=await RefCode.refka_back(callback.from_user.id))


@router.callback_query(F.data == "language_lang")
async def language_hanlder(callback: CallbackQuery):
    await callback.answer("")

    await callback.message.delete()
    lang_param = await MetodSQL.get_language(callback.from_user.id)
    print(lang_param)

    translator = await get_translator(lang_param)
    _ = translator.gettext
    lang_param = await MetodSQL.get_language(callback.from_user.id)

    translator = await get_translator(lang_param)
    _ = translator.gettext
    text = _("–ù–∞ –∫–∞–∫–æ–º —è–∑—ã–∫–µ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –æ–±—ä–µ–¥–∏–Ω—è—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –ò–¢-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏? üåç")
    await callback.message.answer(
        text,
        reply_markup=await MetodKeyboardInline.lang_back(callback.from_user.id)
    )


@router.callback_query(lambda c: c.data in {
    "en", "es", "de",
    "uk", "ru",
    "kk"
})
async def update_language(callback: CallbackQuery):
    await callback.answer("")

    lang_param = await MetodSQL.get_language(callback.from_user.id)

    translator = await get_translator(lang_param)
    _ = translator.gettext
    await MetodSQL.update_lang(callback.from_user.id, callback.data)
    text = _("–Ø–∑—ã–∫ –æ–±–Ω–æ–≤–ª–µ–Ω")
    await callback.message.answer(text)




